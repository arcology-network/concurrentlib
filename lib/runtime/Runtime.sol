// SPDX-License-Identifier: GPL-3.0
pragma solidity >= 0.8.0 < 0.9.0;

/**
 * @author Arcology Network
 * @title Runtime Contract
 * @dev The Runtime contract provides runtime information to developers.
 *      It exposes functions to retrieve pseudo-process IDs (PIDs) and pseudo-random UUIDs.
 */
contract Runtime {
    /**
     * @notice Get the pseudo-process ID (PID) from an external contract.
     * @dev The PID is a pseudo-process ID and does not represent a real transaction being processed.
     * @return args The pseudo-process ID (PID) returned by the external contract.
     */
    function pid() public returns(bytes memory) {
        (,bytes memory random) = address(0xa0).call(abi.encodeWithSignature("pid()"));     
        return random;
    }

    /**
     * @notice Get execution scheduler information for the block.
     * @return The scheduler information for the block.
     */
    function schedule() public returns(uint256, uint256, uint256, uint256) {
        (,bytes memory data) = address(0xa0).call(abi.encodeWithSignature("schedule()"));
        return abi.decode(data, (uint256, uint256, uint256, uint256));  
    }

    /**
     * @notice Get a pseudo-random UUID from an external contract.
     * @dev The UUID is a pseudo-random number generated by the external contract.
     * @return The pseudo-random UUID returned by the external contract.
     */
    function uuid() public returns(bytes memory) {
        (,bytes memory id) = address(0xa0).call(abi.encodeWithSignature("uuid()"));     
        return id;
    }
  
    /**
     * @notice Call a custom operation.
     * @return The result of the custom operation.
     */
    function eval(string memory func, bytes memory data) public virtual returns(bool, bytes memory) {
        return address(0xa0).call(abi.encodeWithSignature(func, data)); 
    }

    /**
     * @notice Call a custom operation.
     * @return The result of the custom operation.
     */
    function eval(string memory func, uint256 data) public virtual returns(bool, bytes memory) {
        return address(0xa0).call(abi.encodeWithSignature(func, data)); 
    }
}
