// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.19;

/**
 * @author Arcology Network
 * @title Runtime Contract
 * @dev The Runtime contract provides runtime information to developers.
 *      It exposes functions to retrieve pseudo-process IDs (PIDs) and pseudo-random UUIDs.
 */
contract Runtime {
    /**
     * @notice Emitted when a log message is generated.
     * @param message The log message string.
     */
    event logMsg(string message);

    /**
     * @notice Get the pseudo-process ID (PID) from an external contract.
     * @dev The PID is a pseudo-process ID and does not represent a real transaction being processed.
     * @return args The pseudo-process ID (PID) returned by the external contract.
     */
    function pid() public returns(bytes memory args) {
        (,bytes memory random) = address(0xa0).call(abi.encodeWithSignature("pid()"));     
        return random;
    }

    /**
     * @notice Get a pseudo-random UUID from an external contract.
     * @dev The UUID is a pseudo-random number generated by the external contract.
     * @return id The pseudo-random UUID returned by the external contract.
     */
    function uuid() public returns(bytes memory id) {
        (,id) = address(0xa0).call(abi.encodeWithSignature("uuid()"));     
        return id;
    }
}

/**
 * @title Revertible Contract
 * @dev The Revertible contract provides a function to clear all state changes made in the current block
 *      and reset the contract to the previous state. Caution should be exercised while using this function,
 *      especially in the constructor, as it may cause the contract deployment to fail.
 */
contract Revertible { 
    /**
     * @notice Roll back all state changes made in the current block and reset the contract to the previous state.
     * @dev Caution: Using this function, especially in the constructor, may cause the contract deployment to fail.
     */
    function rollback() public {
        address(0xa0).call(abi.encodeWithSignature("Reset()"));     
    }
}